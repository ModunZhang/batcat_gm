#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');

var debug = require('debug')('batcatGm:server');
var http = require('http');
var mongoose = require('mongoose');

var config = require('../config/config');

/**
 * Connect mongo
 */
var connect = function(){
  var options = {server:{socketOptions:{keepAlive:1}}};
  mongoose.connect(config.mongoHost, options);
};
connect();

/**
 * Include mongoose models
 */
fs.readdirSync(__dirname + '/../app/models').forEach(function(file){
  if(~file.indexOf('.js')) require(__dirname + '/../app/models/' + file);
});

/**
 * Init app
 */
var app = require('../app');

/**
 * Get port from environment and store in Express.
 */
var host = process.env.HOST || '127.0.0.1';
var port = normalizePort(process.env.PORT || '3000');
app.set('host', host);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val){
  var port = parseInt(val, 10);

  if(isNaN(port)){
    // named pipe
    return val;
  }

  if(port >= 0){
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error){
  if(error.syscall !== 'listen'){
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch(error.code){
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(){
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : addr.address + ':' + addr.port;
  debug('Listening on ' + bind);
}
